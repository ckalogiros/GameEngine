

    /** ## PRIVATE_BUFFERS
     * 
     * The application may need some drawables to be stored in private vertex buffers.
     * That means the drawables must explicitly be stored in the vertex buffer by the user,
     * and automatic selection to add to a private buffer, by 'Gl_generate_context()', is prohibited.
     * The core reason of private buffers is to have control over the vertexBuffer rendering (Render: On/Off).
     * By setting the vb to be private, the only way to add to that buffer is by 
     * passing "FLAGS = GL_VB.SPECIFIC, vertexBufferIdx = 'the private buffer index'" 
     * upon drawable's 'AddToGraphicsBuffer()' function.
     */

    /**
     * ## Gfx_Pool.session
     * 
     * A way of storing all activity of the gfx pool manipulation for a given period of executing code.
     * At the end of the session (SessionEnd()), we can make changes to all the changes in that session.
     * 
     * For example, we may need to allocate private buffers for an options menu. We cannot pass 
     * 'flag=get inactive buffers' and set the current buffers to be active.
     * we want is to delay the activation until all meshes of that options menu have been resolved,
     * in order to use the same buffers for matching meshes for that menu.
     * 
     */



## Framebuffer
    ## Framebuffer VS Renderbuffer
        Renderbuffer is more like a texture, state ca be drawn to a renderbuffer.
        It is said to be faster, because the render buffer is not to be read back, and webgl can optimize the renderbuffer data.

        The Framebuffer object is not actually a buffer, but an aggregator object that contains one or 
        more attachments, which by their turn, are the actual buffers. You can understand the 
        Framebuffer as C structure where every member is a pointer to a buffer. Without any attachment,
        a Framebuffer object has very low footprint.

        Now each buffer attached to a Framebuffer can be a Renderbuffer or a texture.

        The Renderbuffer is an actual buffer (an array of bytes, or integers, or pixels). The 
        Renderbuffer stores pixel values in native format, so it's optimized for offscreen rendering.
        In other words, drawing to a Renderbuffer can be much faster than drawing to a texture. 
        The drawback is that pixels uses a native, implementation-dependent format, so that reading from
        a Renderbuffer is much harder than reading from a texture. Nevertheless, once a Renderbuffer has
        been painted, one can copy its content directly to screen (or to other Renderbuffer, I guess),
        very quickly using pixel transfer operations. This means that a Renderbuffer can be used to 
        efficiently implement the double buffer pattern that you mentioned.

        Renderbuffers are a relatively new concept. Before them, a Framebuffer was used to render to a 
        texture, which can be slower because a texture uses a standard format. It is still possible to 
        render to a texture, and that's quite useful when one needs to perform multiple passes over each
        pixel to build a scene, or to draw a scene on a surface of another scene!

        Renderbuffer Object
        In addition, renderbuffer object is newly introduced for offscreen rendering. It allows to 
        render a scene directly to a renderbuffer object, instead of rendering to a texture object. 
        Renderbuffer is simply a data storage object containing a single image of a renderable internal 
        format. It is used to store OpenGL logical buffers that do not have corresponding texture      

    ## RENDER BUFFER ATACHMENTS: 

        gl.COLOR_ATTACHMENT0: Attaches the texture to the framebuffer's color buffer.
        gl.DEPTH_ATTACHMENT: Attaches the texture to the framebuffer's depth buffer.
        gl.STENCIL_ATTACHMENT: Attaches the texture to the framebuffer's stencil buffer.
        WebGL 2 context
        gl.DEPTH_STENCIL_ATTACHMENT: depth and stencil buffer.
        gl.COLOR_ATTACHMENT1 
        ...
        gl.COLOR_ATTACHMENT15


    ## framebufferRenderbuffer (target, attachment, renderbuffertarget, renderbuffer)
        https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer
            
        target
            A GLenum specifying the binding point (target) for the framebuffer. Possible values:
            gl.FRAMEBUFFER
                Collection buffer data storage of color, alpha, depth and stencil buffers used to render an image.

            When using a WebGL 2 context, the following values are available additionally:
            gl.DRAW_FRAMEBUFFER
                Equivalent to gl.FRAMEBUFFER. Used as a destination for drawing, rendering, clearing, and writing operations.
            gl.READ_FRAMEBUFFER
                Used as a source for reading operations.

        attachment
            A GLenum specifying the attachment point for the render buffer. Possible values:
                gl.COLOR_ATTACHMENT0: color buffer.
                gl.DEPTH_ATTACHMENT: depth buffer.
                gl.STENCIL_ATTACHMENT: stencil buffer.
                gl.DEPTH_STENCIL_ATTACHMENT: depth and stencil buffer.

            When using a WebGL 2 context, the following values are available additionally:
                gl.COLOR_ATTACHMENT1 gl.COLOR_ATTACHMENT2 gl.COLOR_ATTACHMENT3 gl.COLOR_ATTACHMENT4 gl.COLOR_ATTACHMENT5 gl.COLOR_ATTACHMENT6 gl.COLOR_ATTACHMENT7 gl.COLOR_ATTACHMENT8 gl.COLOR_ATTACHMENT9 gl.COLOR_ATTACHMENT10 gl.COLOR_ATTACHMENT11 gl.COLOR_ATTACHMENT12 gl.COLOR_ATTACHMENT13 gl.COLOR_ATTACHMENT14 gl.COLOR_ATTACHMENT15

            When using the WEBGL_draw_buffers extension:
                ext.COLOR_ATTACHMENT0_WEBGL (same as gl.COLOR_ATTACHMENT0)
                ext.COLOR_ATTACHMENT1_WEBGL ext.COLOR_ATTACHMENT2_WEBGL ext.COLOR_ATTACHMENT3_WEBGL ext.COLOR_ATTACHMENT4_WEBGL ext.COLOR_ATTACHMENT5_WEBGL ext.COLOR_ATTACHMENT6_WEBGL ext.COLOR_ATTACHMENT7_WEBGL ext.COLOR_ATTACHMENT8_WEBGL ext.COLOR_ATTACHMENT9_WEBGL ext.COLOR_ATTACHMENT10_WEBGL ext.COLOR_ATTACHMENT11_WEBGL ext.COLOR_ATTACHMENT12_WEBGL ext.COLOR_ATTACHMENT13_WEBGL ext.COLOR_ATTACHMENT14_WEBGL ext.COLOR_ATTACHMENT15_WEBGL

        renderbuffertarget
            A GLenum specifying the binding point (target) for the render buffer. Possible values:
            gl.RENDERBUFFER
                Buffer data storage for single images in a renderable internal format.

        renderbuffer
            A WebGLRenderbuffer object to attach.

        Return value

        None (undefined).

    ## framebufferTexture2D (target, attachment, textarget, texture, level)
        target
            A GLenum specifying the binding point (target). Possible values:
            gl.FRAMEBUFFER
                Collection buffer data storage of color, alpha, depth and stencil buffers used to render an image.

            When using a WebGL 2 context, the following values are available additionally:
            gl.DRAW_FRAMEBUFFER
                Used as a destination for drawing, rendering, clearing, and writing operations.

            gl.READ_FRAMEBUFFER
                Used as a source for reading operations.

            When binding, gl.FRAMEBUFFER sets both the gl.DRAW_FRAMEBUFFER and gl.READ_FRAMEBUFFER binding points. When referencing, gl.FRAMEBUFFER refers to the gl.DRAW_FRAMEBUFFER binding

        attachment
            A GLenum specifying the attachment point for the texture. Possible values:
                gl.COLOR_ATTACHMENT0: Attaches the texture to the framebuffer's color buffer.
                gl.DEPTH_ATTACHMENT: Attaches the texture to the framebuffer's depth buffer.
                gl.STENCIL_ATTACHMENT: Attaches the texture to the framebuffer's stencil buffer.

            When using a WebGL 2 context, the following values are available additionally:
                gl.DEPTH_STENCIL_ATTACHMENT: depth and stencil buffer.
                gl.COLOR_ATTACHMENT1 gl.COLOR_ATTACHMENT2 gl.COLOR_ATTACHMENT3 gl.COLOR_ATTACHMENT4 gl.COLOR_ATTACHMENT5 gl.COLOR_ATTACHMENT6 gl.COLOR_ATTACHMENT7 gl.COLOR_ATTACHMENT8 gl.COLOR_ATTACHMENT9 gl.COLOR_ATTACHMENT10 gl.COLOR_ATTACHMENT11 gl.COLOR_ATTACHMENT12 gl.COLOR_ATTACHMENT13 gl.COLOR_ATTACHMENT14 gl.COLOR_ATTACHMENT15

            When using the WEBGL_draw_buffers extension:
                ext.COLOR_ATTACHMENT0_WEBGL (same as gl.COLOR_ATTACHMENT0)
                ext.COLOR_ATTACHMENT1_WEBGL ext.COLOR_ATTACHMENT2_WEBGL ext.COLOR_ATTACHMENT3_WEBGL ext.COLOR_ATTACHMENT4_WEBGL ext.COLOR_ATTACHMENT5_WEBGL ext.COLOR_ATTACHMENT6_WEBGL ext.COLOR_ATTACHMENT7_WEBGL ext.COLOR_ATTACHMENT8_WEBGL ext.COLOR_ATTACHMENT9_WEBGL ext.COLOR_ATTACHMENT10_WEBGL ext.COLOR_ATTACHMENT11_WEBGL ext.COLOR_ATTACHMENT12_WEBGL ext.COLOR_ATTACHMENT13_WEBGL ext.COLOR_ATTACHMENT14_WEBGL ext.COLOR_ATTACHMENT15_WEBGL

            When using the WEBGL_depth_texture extension:
                gl.DEPTH_STENCIL_ATTACHMENT: Depth and stencil buffer data storage.

        textarget
            A GLenum specifying the texture target. Possible values:
                gl.TEXTURE_2D: A 2D image.
                gl.TEXTURE_CUBE_MAP_POSITIVE_X: Image for the positive X face of the cube.
                gl.TEXTURE_CUBE_MAP_NEGATIVE_X: Image for the negative X face of the cube.
                gl.TEXTURE_CUBE_MAP_POSITIVE_Y: Image for the positive Y face of the cube.
                gl.TEXTURE_CUBE_MAP_NEGATIVE_Y: Image for the negative Y face of the cube.
                gl.TEXTURE_CUBE_MAP_POSITIVE_Z: Image for the positive Z face of the cube.
                gl.TEXTURE_CUBE_MAP_NEGATIVE_Z: Image for the negative Z face of the cube.

        texture
            A WebGLTexture object whose image to attach.

        level
            A GLint specifying the mipmap level of the texture image to be attached. Must be 0.

    ## renderbufferStorage (target, internalFormat, width, height)
        target
            A GLenum specifying the target renderbuffer object. Possible values:
            gl.RENDERBUFFER
                Buffer data storage for single images in a renderable internal format.

        internalFormat
            A GLenum specifying the internal format of the renderbuffer. Possible values:
                gl.RGBA4: 4 red bits, 4 green bits, 4 blue bits 4 alpha bits.
                gl.RGB565: 5 red bits, 6 green bits, 5 blue bits.
                gl.RGB5_A1: 5 red bits, 5 green bits, 5 blue bits, 1 alpha bit.
                gl.DEPTH_COMPONENT16: 16 depth bits.
                gl.STENCIL_INDEX8: 8 stencil bits.
                gl.DEPTH_STENCIL
            When using a WebGL 2 context, the following values are available additionally:
                gl.R8
                gl.R8UI
                gl.R8I
                gl.R16UI
                gl.R16I
                gl.R32UI
                gl.R32I
                gl.RG8
                gl.RG8UI
                gl.RG8I
                gl.RG16UI
                gl.RG16I
                gl.RG32UI
                gl.RG32I
                gl.RGB8
                gl.RGBA8
                gl.SRGB8_ALPHA8 (also available as an extension for WebGL 1, see below)
                gl.RGB10_A2
                gl.RGBA8UI
                gl.RGBA8I
                gl.RGB10_A2UI
                gl.RGBA16UI
                gl.RGBA16I
                gl.RGBA32I
                gl.RGBA32UI
                gl.DEPTH_COMPONENT24
                gl.DEPTH_COMPONENT32F
                gl.DEPTH24_STENCIL8
                gl.DEPTH32F_STENCIL8
            When using the WEBGL_color_buffer_float extension:
                ext.RGBA32F_EXT: RGBA 32-bit floating-point type.
                ext.RGB32F_EXT: RGB 32-bit floating-point type.
            When using the EXT_sRGB extension:
                ext.SRGB8_ALPHA8_EXT: 8-bit sRGB and alpha.
            When using a WebGL 2 context and the EXT_color_buffer_float extension:
                gl.R16F
                gl.RG16F
                gl.RGBA16F
                gl.R32F
                gl.RG32F
                gl.RGBA32F
                gl.R11F_G11F_B10F

        width
            A GLsizei specifying the width of the renderbuffer in pixels.

        height
            A GLsizei specifying the height of the renderbuffer in pixels.
