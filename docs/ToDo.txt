--------------------------------------------------- TESTING!
. Implement a smooth fps timer, by addding
  on each frame the new delta time but
  subtracting the 'oldest' one, with a constant counter.
  The 'oldest' value is up to dicision. For example
  we could set 1000 samples, so the oldest will be the -100 delta. 
--------------------------------------------------- TESTING!

--------------------------------------------------- IMIDIATE!

. Any new mesh or existing mesh update to the gfx buffers should be an One Time Event().
  ??
    DispatchEvent(update gfx pipeline), which runs for every update separately
    Or 
    gather all updates {
      IF: scene's progidx needsUpdate = true 
      IF: scene's vbidx needsUpdate = true
      IF: scene's mesh needsUpdate = true
    }
    which  runs all updates at once
    but we have to check for updates on each frame
  ??

  with the Scene being responsible to run for the 'gfx.prog[i].vb[j].mesh.Render() ' functionality. 

. Implement set render queue priority for meshes inside a vb.

  . Implement destruction of gfx buffers and gl program.
    (Also make sure all suposed private buffers are set private).
--------------------------------------------------- IMIDIATE!

--------------------------------------------------- 

TODO:
Dive into how we can efficiently not draw specific vertices.
1. Like reconstructing the index buffer by exluding the indices not to be drawn (if removed vertices are not contiguous)
2. If vertices are contiguous, change the start and end of the index buffer on GlDraw()

TODO:
ORGANIZE class Mesh chaos

TODO:
Implement all class names to an array and class has only an index to the name.
In order to see the text name for debugging, create a conditional: if(DEBUG.see names) name=string Else name=index
and enable-disable with DEBUG.see name = true/false

TODO:
Remove any duplicate methods of Mesh, Text_Mesh, Rect_Mesh and the rest.
Also organize all the methods of the Mesh class with the widget classe deriving from them

TODO:
On a dropdown menu deactivation,
  check if the attributes of the meshes to be removed are in a concecutive order,
  so that we can simply remove the indexes and reduce the vertexbuffer's count

TODO:
Create a DEBUG hover listeners buffer, only for the tip tool.
By  calling one function with a root widget and run recursive down the tree.

TODO:
Learn how VAO's work and use them properly

TODO:
Go Workers!

TODO: 
We can render the text of a scroller to a frame buffer, 10 lines above and 10 below from the bounding box,
and on a scroll move event we re-render the framebuffer with the correct lines, depended on the scroll movement.

TODO: 
Build a proper sdf font texture

TODO: 
Implement minimize on menus

TODO: 
Finish with the info widgets, now that we have separation of gfx buffers for debuging 

TODO: 
Render all the meshes that are static to a frame buffer texture and render the texture.

TODO:
Create a SID flag for textured meshes, since different texture units ought to be drawn in separate vertex buffers.  

IMPORTANT!:
Batch remove meshes attribs from gfx buffers.
  Example: 
      GfxRemoveMesh(gfx){
        SOME_BUFFER[some].push(start, progidx,, vbidx)
      }
      GfxRemoveBatch(SOME_BUFFER){
        // Unify all starts of all attribs to be removed and shift exixting attributes of the buffer as few times as possible.
      }

. Batch activate/deactivate buffers. Use an indexed  by prog and vb buffer.
  Example: StoreForUpdate(arr); arr = prog[progidx].vb[vbidx]
           StoreForUpdate(arr){
              GfxSetVbShow(progs[arr[i]], progs[arr[i]].vb[arr[i].vb[j]])
           }

. Implement second popup menu(from the main popup menu)

. Maybe we should implement timeIntervals for the Gl_draw function. 
. Or have static meshes in specific programs and buffers. 

. Move touch screen input from MouseEvents.js to input folder

. Create a division of canvas, for colission detection, 
  place meshes in 2D(like UI) and many more.
. Implement RenderBuffers.
. Finish a good implementation for Animations.
. Event driven system and how it can offer efficiency and/or flexibility.
. Implement glBufferSubData.
. Implement the strategy for divide meshes into static draw and dynamic draw.

. - Index Buffers - 
  . Test draw specific meshes from creating another index buffer, 
    or if possible select indices from an index buffer.
  . Maybe create groups of indices stored in meshes, that
    will allow the re-rendering of certain groups of meshes,
    also maybe we implement an index-based solution to
    address vertices and its attributes instead of gfxInfo start????  

. - More Geometry -
  . Line
  . BezierCurve
  . Triangle2D
  . Triangle3D
  . etc
--------------------------------------------------- // TODO

--------------------------------------------------- CONTINUE


--------------------------------------------------- CONTINUE



